// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String   @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal  @default(0) @db.Decimal(12, 2)
  rating      Decimal  @default(0) @db.Decimal(3, 2)
  numReviews  Int      @default(0)
  isFeatured  Boolean
  banner      String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("No_name")
  email         String    @unique
  emailVerified DateTime?  @db.Timestamp(6)
  password      String
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  image         String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  session       Session[]
  cart Cart[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid  // ðŸ‘ˆ Ø§ÛŒÙ† Ø®Ø· Ø±Ø§ ØªØºÛŒÛŒØ± Ø¯Ù‡ÛŒØ¯
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Cart {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String? @db.Uuid
  sessionCartId     String
  items             Json[]  @default([])
  itemsPrice        Decimal @db.Decimal(12, 2)
  totalPrice        Decimal @db.Decimal(12, 2)
  shippingPrice     Decimal @db.Decimal(12, 2)
  taxPrice          Decimal @db.Decimal(12, 2)
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  user              User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}